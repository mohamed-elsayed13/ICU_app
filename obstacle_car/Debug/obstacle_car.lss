
obstacle_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004bc  00000550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000550  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002088  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e5  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000295  00000000  00000000  0000282d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000244  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  8a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
		
		 _delay_ms(250);    
		     }
}
		
ISR(TIMER0_OVF_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	timer_over_flow++;
  9e:	80 91 61 00 	lds	r24, 0x0061
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 61 00 	sts	0x0061, r24
	}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <timer_on>:
void timer_on(){
	TCNT0=0;
  b4:	12 be       	out	0x32, r1	; 50
	SETBIT(TCCR0,CS02);
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	83 bf       	out	0x33, r24	; 51
	SETBIT(TCCR0,CS00);
  bc:	83 b7       	in	r24, 0x33	; 51
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	83 bf       	out	0x33, r24	; 51
	
}
  c2:	08 95       	ret

000000c4 <timer_off>:
void timer_off(){
	CLRBIT(TCCR0,CS02);
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	83 bf       	out	0x33, r24	; 51
	CLRBIT(TCCR0,CS00);	
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	83 bf       	out	0x33, r24	; 51
}
  d0:	08 95       	ret

000000d2 <get_display_distance>:
void get_display_distance(){
	distance=0.01715*total_time;		// 2x=34300*t & to get time in seconds we multiplied by 10^-6
  d2:	60 91 64 00 	lds	r22, 0x0064
  d6:	70 91 65 00 	lds	r23, 0x0065
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__floatunsisf>
  e2:	28 e2       	ldi	r18, 0x28	; 40
  e4:	3e e7       	ldi	r19, 0x7E	; 126
  e6:	4c e8       	ldi	r20, 0x8C	; 140
  e8:	5c e3       	ldi	r21, 0x3C	; 60
  ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__mulsf3>
  ee:	0e 94 3f 01 	call	0x27e	; 0x27e <__fixunssfsi>
  f2:	dc 01       	movw	r26, r24
  f4:	cb 01       	movw	r24, r22
  f6:	90 93 63 00 	sts	0x0063, r25
  fa:	80 93 62 00 	sts	0x0062, r24
	}
  fe:	08 95       	ret

00000100 <sensor_trig>:
	
void sensor_trig(){
		SETBIT(PORTC,2);
 100:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <sensor_trig+0x4>
 108:	00 00       	nop
		_delay_us(10); // ultrasonic data sheet said 10 us pulse will be good for trigger the sensor
		CLRBIT(PORTC,2);
 10a:	aa 98       	cbi	0x15, 2	; 21
		/*
		c.c = (1/16Mhz)
		time t represent time of starting wave of ultrasonic sensor 
		TCNT0 multiplied by 1023 the brescaler and c.c to know the real time
		*/
 10c:	08 95       	ret

0000010e <main>:
uint16_t  total_time=0 , distance=0 ;
uint8_t timer_over_flow=0; 
uint8_t grd=0;
int main(void)
{
	TCCR1A=0;
 10e:	1f bc       	out	0x2f, r1	; 47
	TIFR=(1<<ICF1); /*clear input caputre flag*/
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	88 bf       	out	0x38, r24	; 56
	TCCR1B=0x41;	/*capture on rising flag*/
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	8e bd       	out	0x2e, r24	; 46
	timer_normal_init();
 118:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <timer_normal_init>
	PWM_init_timer2_oc2();
 11c:	0e 94 2b 01 	call	0x256	; 0x256 <PWM_init_timer2_oc2>
	SETBIT(DDRC,2);
 120:	a2 9a       	sbi	0x14, 2	; 20
    CLRBIT(DDRD,6);
 122:	8e 98       	cbi	0x11, 6	; 17
	while(1)
    {
		sensor_trig();
		while (GETBIT(TIFR,ICF1)==0){}			
		timer_on();
		TIFR=(1<<ICF1); /*clear input capture flag*/
 124:	c0 e2       	ldi	r28, 0x20	; 32
		TCCR1B=0x1;	/*capture on falling flag*/
 126:	d1 e0       	ldi	r29, 0x01	; 1
		while (GETBIT(TIFR,ICF1)==0){}
		total_time=TCNT0*1024.0 /16.0;
		total_time=total_time+timer_over_flow*(16230);   // 16230us = 255*1024/16 refers to the ovf_value_for_timer0
 128:	0f 2e       	mov	r0, r31
 12a:	f6 e6       	ldi	r31, 0x66	; 102
 12c:	ef 2e       	mov	r14, r31
 12e:	ff e3       	ldi	r31, 0x3F	; 63
 130:	ff 2e       	mov	r15, r31
 132:	f0 2d       	mov	r31, r0
		timer_off();
		timer_over_flow=0;
		get_display_distance();
		TIFR=(1<<ICF1); /*clear input caputre flag*/
		TCCR1B=0x41;	/*capture on rising flag*/
 134:	11 e4       	ldi	r17, 0x41	; 65
	PWM_init_timer2_oc2();
	SETBIT(DDRC,2);
    CLRBIT(DDRD,6);
	while(1)
    {
		sensor_trig();
 136:	0e 94 80 00 	call	0x100	; 0x100 <sensor_trig>
		while (GETBIT(TIFR,ICF1)==0){}			
 13a:	88 b7       	in	r24, 0x38	; 56
 13c:	85 ff       	sbrs	r24, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <main+0x2c>
		timer_on();
 140:	0e 94 5a 00 	call	0xb4	; 0xb4 <timer_on>
		TIFR=(1<<ICF1); /*clear input capture flag*/
 144:	c8 bf       	out	0x38, r28	; 56
		TCCR1B=0x1;	/*capture on falling flag*/
 146:	de bd       	out	0x2e, r29	; 46
		while (GETBIT(TIFR,ICF1)==0){}
 148:	88 b7       	in	r24, 0x38	; 56
 14a:	85 ff       	sbrs	r24, 5
 14c:	fd cf       	rjmp	.-6      	; 0x148 <main+0x3a>
		total_time=TCNT0*1024.0 /16.0;
 14e:	62 b7       	in	r22, 0x32	; 50
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 6d 01 	call	0x2da	; 0x2da <__floatsisf>
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e8       	ldi	r20, 0x80	; 128
 160:	54 e4       	ldi	r21, 0x44	; 68
 162:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__mulsf3>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	40 e8       	ldi	r20, 0x80	; 128
 16c:	5d e3       	ldi	r21, 0x3D	; 61
 16e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__mulsf3>
 172:	0e 94 3f 01 	call	0x27e	; 0x27e <__fixunssfsi>
		total_time=total_time+timer_over_flow*(16230);   // 16230us = 255*1024/16 refers to the ovf_value_for_timer0
 176:	20 91 61 00 	lds	r18, 0x0061
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	2e 9d       	mul	r18, r14
 17e:	c0 01       	movw	r24, r0
 180:	2f 9d       	mul	r18, r15
 182:	90 0d       	add	r25, r0
 184:	3e 9d       	mul	r19, r14
 186:	90 0d       	add	r25, r0
 188:	11 24       	eor	r1, r1
 18a:	86 0f       	add	r24, r22
 18c:	97 1f       	adc	r25, r23
 18e:	90 93 65 00 	sts	0x0065, r25
 192:	80 93 64 00 	sts	0x0064, r24
		timer_off();
 196:	0e 94 62 00 	call	0xc4	; 0xc4 <timer_off>
		timer_over_flow=0;
 19a:	10 92 61 00 	sts	0x0061, r1
		get_display_distance();
 19e:	0e 94 69 00 	call	0xd2	; 0xd2 <get_display_distance>
		TIFR=(1<<ICF1); /*clear input caputre flag*/
 1a2:	c8 bf       	out	0x38, r28	; 56
		TCCR1B=0x41;	/*capture on rising flag*/
 1a4:	1e bd       	out	0x2e, r17	; 46
		
		if(distance<=400&&distance>10){
 1a6:	80 91 62 00 	lds	r24, 0x0062
 1aa:	90 91 63 00 	lds	r25, 0x0063
 1ae:	0b 97       	sbiw	r24, 0x0b	; 11
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	86 38       	cpi	r24, 0x86	; 134
 1b4:	92 07       	cpc	r25, r18
 1b6:	18 f4       	brcc	.+6      	; 0x1be <main+0xb0>
		set_duty_oc2(100);
 1b8:	84 e6       	ldi	r24, 0x64	; 100
 1ba:	0e 94 2f 01 	call	0x25e	; 0x25e <set_duty_oc2>
						} 
		if(distance<=10&&distance>=0){
 1be:	80 91 62 00 	lds	r24, 0x0062
 1c2:	90 91 63 00 	lds	r25, 0x0063
 1c6:	8b 30       	cpi	r24, 0x0B	; 11
 1c8:	91 05       	cpc	r25, r1
 1ca:	20 f4       	brcc	.+8      	; 0x1d4 <main+0xc6>
			set_duty_oc2(grd);
 1cc:	80 91 60 00 	lds	r24, 0x0060
 1d0:	0e 94 2f 01 	call	0x25e	; 0x25e <set_duty_oc2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	94 e3       	ldi	r25, 0x34	; 52
 1d8:	ac e0       	ldi	r26, 0x0C	; 12
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	a0 40       	sbci	r26, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xcc>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xd6>
 1e4:	00 00       	nop
 1e6:	a7 cf       	rjmp	.-178    	; 0x136 <main+0x28>

000001e8 <timer_normal_init>:
 *  Author: M
 */ 
#include "Timer0.h"

void timer_normal_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00);
 1e8:	85 e8       	ldi	r24, 0x85	; 133
 1ea:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK,TOIE0);
 1ec:	89 b7       	in	r24, 0x39	; 57
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	89 bf       	out	0x39, r24	; 57

}
 1f2:	08 95       	ret

000001f4 <timer_compare_init>:
void timer_compare_init(){
	TCCR0= (1<<FOC0) | (1<<CS02) | (1<<CS00) | (1<<WGM01);
 1f4:	8d e8       	ldi	r24, 0x8D	; 141
 1f6:	83 bf       	out	0x33, r24	; 51
	OCR0 =200;
 1f8:	88 ec       	ldi	r24, 0xC8	; 200
 1fa:	8c bf       	out	0x3c, r24	; 60
	SETBIT(TIMSK,OCIE0);
 1fc:	89 b7       	in	r24, 0x39	; 57
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	89 bf       	out	0x39, r24	; 57
	
}
 202:	08 95       	ret

00000204 <PWM_init_timer0_oc0>:
void PWM_init_timer0_oc0(){
	SETBIT(DDRB,3);
 204:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0= (1<<COM01)|(1<<WGM00)|(1<<WGM01)|(1<<CS00);
 206:	89 e6       	ldi	r24, 0x69	; 105
 208:	83 bf       	out	0x33, r24	; 51
}
 20a:	08 95       	ret

0000020c <set_duty_oc0>:
void set_duty_oc0(uint8_t duty){
	OCR0=2.55*duty;
 20c:	68 2f       	mov	r22, r24
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 6d 01 	call	0x2da	; 0x2da <__floatsisf>
 218:	23 e3       	ldi	r18, 0x33	; 51
 21a:	33 e3       	ldi	r19, 0x33	; 51
 21c:	43 e2       	ldi	r20, 0x23	; 35
 21e:	50 e4       	ldi	r21, 0x40	; 64
 220:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__mulsf3>
 224:	0e 94 3f 01 	call	0x27e	; 0x27e <__fixunssfsi>
 228:	6c bf       	out	0x3c, r22	; 60
}
 22a:	08 95       	ret

0000022c <timer2_normal_init>:
 * Created: 17/05/2020 5:14:03 AM
 *  Author: M
 */ 
#include "Timer2.h"
void timer2_normal_init(){
	TCCR2= (1<<FOC2)|(1<<CS20)|(1<<CS21)|(1<<CS22);
 22c:	87 e8       	ldi	r24, 0x87	; 135
 22e:	85 bd       	out	0x25, r24	; 37
	TIMSK |= 1<<TOIE2;
 230:	89 b7       	in	r24, 0x39	; 57
 232:	80 64       	ori	r24, 0x40	; 64
 234:	89 bf       	out	0x39, r24	; 57
	sei();
 236:	78 94       	sei
}
 238:	08 95       	ret

0000023a <timer2_compare_init>:
void timer2_compare_init(){
	TCCR2= (1<<FOC2)|(1<<WGM21)|(1<<CS20)|(1<<CS21)|(1<<CS22);
 23a:	8f e8       	ldi	r24, 0x8F	; 143
 23c:	85 bd       	out	0x25, r24	; 37
	TIMSK |= 1<<OCIE2;
 23e:	89 b7       	in	r24, 0x39	; 57
 240:	80 68       	ori	r24, 0x80	; 128
 242:	89 bf       	out	0x39, r24	; 57
	OCR2=200;
 244:	88 ec       	ldi	r24, 0xC8	; 200
 246:	83 bd       	out	0x23, r24	; 35
	sei();
 248:	78 94       	sei
}
 24a:	08 95       	ret

0000024c <timer2_freq_gen_init>:
void timer2_freq_gen_init(uint8_t value){
	SETBIT(DDRD,7);
 24c:	8f 9a       	sbi	0x11, 7	; 17
	TCCR2= (1<<FOC2)|(1<<WGM21)|(1<<CS20)|(1<<COM20);
 24e:	99 e9       	ldi	r25, 0x99	; 153
 250:	95 bd       	out	0x25, r25	; 37
	OCR2=value;
 252:	83 bd       	out	0x23, r24	; 35
	}
 254:	08 95       	ret

00000256 <PWM_init_timer2_oc2>:
void PWM_init_timer2_oc2(){
	SETBIT(DDRD,7);
 256:	8f 9a       	sbi	0x11, 7	; 17
	TCCR2= (1<<COM21)|(1<<WGM20)|(1<<WGM21)|(1<<CS20);
 258:	89 e6       	ldi	r24, 0x69	; 105
 25a:	85 bd       	out	0x25, r24	; 37
}
 25c:	08 95       	ret

0000025e <set_duty_oc2>:
void set_duty_oc2(uint8_t duty){
	OCR2=2.55*duty;
 25e:	68 2f       	mov	r22, r24
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 6d 01 	call	0x2da	; 0x2da <__floatsisf>
 26a:	23 e3       	ldi	r18, 0x33	; 51
 26c:	33 e3       	ldi	r19, 0x33	; 51
 26e:	43 e2       	ldi	r20, 0x23	; 35
 270:	50 e4       	ldi	r21, 0x40	; 64
 272:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__mulsf3>
 276:	0e 94 3f 01 	call	0x27e	; 0x27e <__fixunssfsi>
 27a:	63 bd       	out	0x23, r22	; 35
}
 27c:	08 95       	ret

0000027e <__fixunssfsi>:
 27e:	70 d0       	rcall	.+224    	; 0x360 <__fp_splitA>
 280:	88 f0       	brcs	.+34     	; 0x2a4 <__fixunssfsi+0x26>
 282:	9f 57       	subi	r25, 0x7F	; 127
 284:	90 f0       	brcs	.+36     	; 0x2aa <__fixunssfsi+0x2c>
 286:	b9 2f       	mov	r27, r25
 288:	99 27       	eor	r25, r25
 28a:	b7 51       	subi	r27, 0x17	; 23
 28c:	a0 f0       	brcs	.+40     	; 0x2b6 <__fixunssfsi+0x38>
 28e:	d1 f0       	breq	.+52     	; 0x2c4 <__fixunssfsi+0x46>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	88 1f       	adc	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	1a f0       	brmi	.+6      	; 0x2a0 <__fixunssfsi+0x22>
 29a:	ba 95       	dec	r27
 29c:	c9 f7       	brne	.-14     	; 0x290 <__fixunssfsi+0x12>
 29e:	12 c0       	rjmp	.+36     	; 0x2c4 <__fixunssfsi+0x46>
 2a0:	b1 30       	cpi	r27, 0x01	; 1
 2a2:	81 f0       	breq	.+32     	; 0x2c4 <__fixunssfsi+0x46>
 2a4:	77 d0       	rcall	.+238    	; 0x394 <__fp_zero>
 2a6:	b1 e0       	ldi	r27, 0x01	; 1
 2a8:	08 95       	ret
 2aa:	74 c0       	rjmp	.+232    	; 0x394 <__fp_zero>
 2ac:	67 2f       	mov	r22, r23
 2ae:	78 2f       	mov	r23, r24
 2b0:	88 27       	eor	r24, r24
 2b2:	b8 5f       	subi	r27, 0xF8	; 248
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <__fixunssfsi+0x46>
 2b6:	b9 3f       	cpi	r27, 0xF9	; 249
 2b8:	cc f3       	brlt	.-14     	; 0x2ac <__fixunssfsi+0x2e>
 2ba:	86 95       	lsr	r24
 2bc:	77 95       	ror	r23
 2be:	67 95       	ror	r22
 2c0:	b3 95       	inc	r27
 2c2:	d9 f7       	brne	.-10     	; 0x2ba <__fixunssfsi+0x3c>
 2c4:	3e f4       	brtc	.+14     	; 0x2d4 <__fixunssfsi+0x56>
 2c6:	90 95       	com	r25
 2c8:	80 95       	com	r24
 2ca:	70 95       	com	r23
 2cc:	61 95       	neg	r22
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255
 2d0:	8f 4f       	sbci	r24, 0xFF	; 255
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <__floatunsisf>:
 2d6:	e8 94       	clt
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <__floatsisf+0x12>

000002da <__floatsisf>:
 2da:	97 fb       	bst	r25, 7
 2dc:	3e f4       	brtc	.+14     	; 0x2ec <__floatsisf+0x12>
 2de:	90 95       	com	r25
 2e0:	80 95       	com	r24
 2e2:	70 95       	com	r23
 2e4:	61 95       	neg	r22
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	8f 4f       	sbci	r24, 0xFF	; 255
 2ea:	9f 4f       	sbci	r25, 0xFF	; 255
 2ec:	99 23       	and	r25, r25
 2ee:	a9 f0       	breq	.+42     	; 0x31a <__floatsisf+0x40>
 2f0:	f9 2f       	mov	r31, r25
 2f2:	96 e9       	ldi	r25, 0x96	; 150
 2f4:	bb 27       	eor	r27, r27
 2f6:	93 95       	inc	r25
 2f8:	f6 95       	lsr	r31
 2fa:	87 95       	ror	r24
 2fc:	77 95       	ror	r23
 2fe:	67 95       	ror	r22
 300:	b7 95       	ror	r27
 302:	f1 11       	cpse	r31, r1
 304:	f8 cf       	rjmp	.-16     	; 0x2f6 <__floatsisf+0x1c>
 306:	fa f4       	brpl	.+62     	; 0x346 <__floatsisf+0x6c>
 308:	bb 0f       	add	r27, r27
 30a:	11 f4       	brne	.+4      	; 0x310 <__floatsisf+0x36>
 30c:	60 ff       	sbrs	r22, 0
 30e:	1b c0       	rjmp	.+54     	; 0x346 <__floatsisf+0x6c>
 310:	6f 5f       	subi	r22, 0xFF	; 255
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	8f 4f       	sbci	r24, 0xFF	; 255
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	16 c0       	rjmp	.+44     	; 0x346 <__floatsisf+0x6c>
 31a:	88 23       	and	r24, r24
 31c:	11 f0       	breq	.+4      	; 0x322 <__floatsisf+0x48>
 31e:	96 e9       	ldi	r25, 0x96	; 150
 320:	11 c0       	rjmp	.+34     	; 0x344 <__floatsisf+0x6a>
 322:	77 23       	and	r23, r23
 324:	21 f0       	breq	.+8      	; 0x32e <__floatsisf+0x54>
 326:	9e e8       	ldi	r25, 0x8E	; 142
 328:	87 2f       	mov	r24, r23
 32a:	76 2f       	mov	r23, r22
 32c:	05 c0       	rjmp	.+10     	; 0x338 <__floatsisf+0x5e>
 32e:	66 23       	and	r22, r22
 330:	71 f0       	breq	.+28     	; 0x34e <__floatsisf+0x74>
 332:	96 e8       	ldi	r25, 0x86	; 134
 334:	86 2f       	mov	r24, r22
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	2a f0       	brmi	.+10     	; 0x346 <__floatsisf+0x6c>
 33c:	9a 95       	dec	r25
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	88 1f       	adc	r24, r24
 344:	da f7       	brpl	.-10     	; 0x33c <__floatsisf+0x62>
 346:	88 0f       	add	r24, r24
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	97 f9       	bld	r25, 7
 34e:	08 95       	ret

00000350 <__fp_split3>:
 350:	57 fd       	sbrc	r21, 7
 352:	90 58       	subi	r25, 0x80	; 128
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	59 f0       	breq	.+22     	; 0x370 <__fp_splitA+0x10>
 35a:	5f 3f       	cpi	r21, 0xFF	; 255
 35c:	71 f0       	breq	.+28     	; 0x37a <__fp_splitA+0x1a>
 35e:	47 95       	ror	r20

00000360 <__fp_splitA>:
 360:	88 0f       	add	r24, r24
 362:	97 fb       	bst	r25, 7
 364:	99 1f       	adc	r25, r25
 366:	61 f0       	breq	.+24     	; 0x380 <__fp_splitA+0x20>
 368:	9f 3f       	cpi	r25, 0xFF	; 255
 36a:	79 f0       	breq	.+30     	; 0x38a <__fp_splitA+0x2a>
 36c:	87 95       	ror	r24
 36e:	08 95       	ret
 370:	12 16       	cp	r1, r18
 372:	13 06       	cpc	r1, r19
 374:	14 06       	cpc	r1, r20
 376:	55 1f       	adc	r21, r21
 378:	f2 cf       	rjmp	.-28     	; 0x35e <__fp_split3+0xe>
 37a:	46 95       	lsr	r20
 37c:	f1 df       	rcall	.-30     	; 0x360 <__fp_splitA>
 37e:	08 c0       	rjmp	.+16     	; 0x390 <__fp_splitA+0x30>
 380:	16 16       	cp	r1, r22
 382:	17 06       	cpc	r1, r23
 384:	18 06       	cpc	r1, r24
 386:	99 1f       	adc	r25, r25
 388:	f1 cf       	rjmp	.-30     	; 0x36c <__fp_splitA+0xc>
 38a:	86 95       	lsr	r24
 38c:	71 05       	cpc	r23, r1
 38e:	61 05       	cpc	r22, r1
 390:	08 94       	sec
 392:	08 95       	ret

00000394 <__fp_zero>:
 394:	e8 94       	clt

00000396 <__fp_szero>:
 396:	bb 27       	eor	r27, r27
 398:	66 27       	eor	r22, r22
 39a:	77 27       	eor	r23, r23
 39c:	cb 01       	movw	r24, r22
 39e:	97 f9       	bld	r25, 7
 3a0:	08 95       	ret

000003a2 <__mulsf3>:
 3a2:	0b d0       	rcall	.+22     	; 0x3ba <__mulsf3x>
 3a4:	78 c0       	rjmp	.+240    	; 0x496 <__fp_round>
 3a6:	69 d0       	rcall	.+210    	; 0x47a <__fp_pscA>
 3a8:	28 f0       	brcs	.+10     	; 0x3b4 <__mulsf3+0x12>
 3aa:	6e d0       	rcall	.+220    	; 0x488 <__fp_pscB>
 3ac:	18 f0       	brcs	.+6      	; 0x3b4 <__mulsf3+0x12>
 3ae:	95 23       	and	r25, r21
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <__mulsf3+0x12>
 3b2:	5a c0       	rjmp	.+180    	; 0x468 <__fp_inf>
 3b4:	5f c0       	rjmp	.+190    	; 0x474 <__fp_nan>
 3b6:	11 24       	eor	r1, r1
 3b8:	ee cf       	rjmp	.-36     	; 0x396 <__fp_szero>

000003ba <__mulsf3x>:
 3ba:	ca df       	rcall	.-108    	; 0x350 <__fp_split3>
 3bc:	a0 f3       	brcs	.-24     	; 0x3a6 <__mulsf3+0x4>

000003be <__mulsf3_pse>:
 3be:	95 9f       	mul	r25, r21
 3c0:	d1 f3       	breq	.-12     	; 0x3b6 <__mulsf3+0x14>
 3c2:	95 0f       	add	r25, r21
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	55 1f       	adc	r21, r21
 3c8:	62 9f       	mul	r22, r18
 3ca:	f0 01       	movw	r30, r0
 3cc:	72 9f       	mul	r23, r18
 3ce:	bb 27       	eor	r27, r27
 3d0:	f0 0d       	add	r31, r0
 3d2:	b1 1d       	adc	r27, r1
 3d4:	63 9f       	mul	r22, r19
 3d6:	aa 27       	eor	r26, r26
 3d8:	f0 0d       	add	r31, r0
 3da:	b1 1d       	adc	r27, r1
 3dc:	aa 1f       	adc	r26, r26
 3de:	64 9f       	mul	r22, r20
 3e0:	66 27       	eor	r22, r22
 3e2:	b0 0d       	add	r27, r0
 3e4:	a1 1d       	adc	r26, r1
 3e6:	66 1f       	adc	r22, r22
 3e8:	82 9f       	mul	r24, r18
 3ea:	22 27       	eor	r18, r18
 3ec:	b0 0d       	add	r27, r0
 3ee:	a1 1d       	adc	r26, r1
 3f0:	62 1f       	adc	r22, r18
 3f2:	73 9f       	mul	r23, r19
 3f4:	b0 0d       	add	r27, r0
 3f6:	a1 1d       	adc	r26, r1
 3f8:	62 1f       	adc	r22, r18
 3fa:	83 9f       	mul	r24, r19
 3fc:	a0 0d       	add	r26, r0
 3fe:	61 1d       	adc	r22, r1
 400:	22 1f       	adc	r18, r18
 402:	74 9f       	mul	r23, r20
 404:	33 27       	eor	r19, r19
 406:	a0 0d       	add	r26, r0
 408:	61 1d       	adc	r22, r1
 40a:	23 1f       	adc	r18, r19
 40c:	84 9f       	mul	r24, r20
 40e:	60 0d       	add	r22, r0
 410:	21 1d       	adc	r18, r1
 412:	82 2f       	mov	r24, r18
 414:	76 2f       	mov	r23, r22
 416:	6a 2f       	mov	r22, r26
 418:	11 24       	eor	r1, r1
 41a:	9f 57       	subi	r25, 0x7F	; 127
 41c:	50 40       	sbci	r21, 0x00	; 0
 41e:	8a f0       	brmi	.+34     	; 0x442 <__mulsf3_pse+0x84>
 420:	e1 f0       	breq	.+56     	; 0x45a <__mulsf3_pse+0x9c>
 422:	88 23       	and	r24, r24
 424:	4a f0       	brmi	.+18     	; 0x438 <__mulsf3_pse+0x7a>
 426:	ee 0f       	add	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	bb 1f       	adc	r27, r27
 42c:	66 1f       	adc	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	91 50       	subi	r25, 0x01	; 1
 434:	50 40       	sbci	r21, 0x00	; 0
 436:	a9 f7       	brne	.-22     	; 0x422 <__mulsf3_pse+0x64>
 438:	9e 3f       	cpi	r25, 0xFE	; 254
 43a:	51 05       	cpc	r21, r1
 43c:	70 f0       	brcs	.+28     	; 0x45a <__mulsf3_pse+0x9c>
 43e:	14 c0       	rjmp	.+40     	; 0x468 <__fp_inf>
 440:	aa cf       	rjmp	.-172    	; 0x396 <__fp_szero>
 442:	5f 3f       	cpi	r21, 0xFF	; 255
 444:	ec f3       	brlt	.-6      	; 0x440 <__mulsf3_pse+0x82>
 446:	98 3e       	cpi	r25, 0xE8	; 232
 448:	dc f3       	brlt	.-10     	; 0x440 <__mulsf3_pse+0x82>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b7 95       	ror	r27
 452:	f7 95       	ror	r31
 454:	e7 95       	ror	r30
 456:	9f 5f       	subi	r25, 0xFF	; 255
 458:	c1 f7       	brne	.-16     	; 0x44a <__mulsf3_pse+0x8c>
 45a:	fe 2b       	or	r31, r30
 45c:	88 0f       	add	r24, r24
 45e:	91 1d       	adc	r25, r1
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	97 f9       	bld	r25, 7
 466:	08 95       	ret

00000468 <__fp_inf>:
 468:	97 f9       	bld	r25, 7
 46a:	9f 67       	ori	r25, 0x7F	; 127
 46c:	80 e8       	ldi	r24, 0x80	; 128
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	08 95       	ret

00000474 <__fp_nan>:
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	80 ec       	ldi	r24, 0xC0	; 192
 478:	08 95       	ret

0000047a <__fp_pscA>:
 47a:	00 24       	eor	r0, r0
 47c:	0a 94       	dec	r0
 47e:	16 16       	cp	r1, r22
 480:	17 06       	cpc	r1, r23
 482:	18 06       	cpc	r1, r24
 484:	09 06       	cpc	r0, r25
 486:	08 95       	ret

00000488 <__fp_pscB>:
 488:	00 24       	eor	r0, r0
 48a:	0a 94       	dec	r0
 48c:	12 16       	cp	r1, r18
 48e:	13 06       	cpc	r1, r19
 490:	14 06       	cpc	r1, r20
 492:	05 06       	cpc	r0, r21
 494:	08 95       	ret

00000496 <__fp_round>:
 496:	09 2e       	mov	r0, r25
 498:	03 94       	inc	r0
 49a:	00 0c       	add	r0, r0
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__fp_round+0xc>
 49e:	88 23       	and	r24, r24
 4a0:	52 f0       	brmi	.+20     	; 0x4b6 <__fp_round+0x20>
 4a2:	bb 0f       	add	r27, r27
 4a4:	40 f4       	brcc	.+16     	; 0x4b6 <__fp_round+0x20>
 4a6:	bf 2b       	or	r27, r31
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0x18>
 4aa:	60 ff       	sbrs	r22, 0
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__fp_round+0x20>
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
